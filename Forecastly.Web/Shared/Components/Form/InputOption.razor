@typeparam TItem
@inject IJSRuntime JS
@using System.Linq.Expressions

@inherits InputBase<string>

<div class="mb-3">
    <label class="small mb-1 fw-bold" for="@Id">@Label</label>
    <select @bind="CurrentValue" id="@Id" class="form-select" disabled="@Disabled" readonly="@ReadOnly">
        @if(Placeholder is not null)
        {
            <option disabled selected>@Placeholder</option>
        }
        @if (Items is not null)
        {
            @foreach (var item in Items)
            {
                @Template(item)
            }
        }
    </select>
    <ValidationMessage For="@ValidationFor" />
</div>

@code {

    [Parameter] public string? Id { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public bool? Disabled { get; set; } = false;
    [Parameter] public bool? ReadOnly { get; set; } = false;
    [Parameter] public IReadOnlyList<TItem>? Items { get; set; }
    [Parameter] public RenderFragment<TItem>? Template { get; set; }
    [Parameter, EditorRequired] public Expression<Func<string>>? ValidationFor { get; set; } = default!;

    protected override bool TryParseValueFromString(string? value, out string result, out string validationErrorMessage)
    {
        result = value;
        validationErrorMessage = null;
        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize select2
            await JS.InvokeVoidAsync("initializeSelect2");
        }
    }
}